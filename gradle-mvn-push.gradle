/*
 * Copyright 2013 Chris Banes
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
apply plugin: 'maven'
apply plugin: 'signing'

ext {
  pom = [
    publishedGroupId  : 'com.shopify.promises',
    artifact          : 'promises',
    libraryName       : 'Promises',
    libraryDescription: 'Lightweight implementation of promise design pattern on Kotlin',
    siteUrl           : 'https://github.com/Shopify/promise-kotlin',
    gitUrl            : 'https://github.com/Shopify/promise-kotlin.git',
    licenseName       : 'The MIT License',
    licenseUrl        : 'https://opensource.org/licenses/MIT',
    author            : 'Shopify Inc.'
  ]
}


version = '0.0.9'
group = project.ext.pom.publishedGroupId

signing {
  required { gradle.taskGraph.hasTask("uploadArchives") }
  def signingKeyId = findProperty("signingKeyId")
  def signingKey = findProperty("signingKey")
  def signingPassword = findProperty("signingPassword")
  useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
  sign configurations.archives
}

uploadArchives {
  repositories {
    mavenDeployer {
      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

      repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
        authentication(userName: System.getenv("OSSRH_USERNAME"), password: System.getenv("OSSRH_PASSWORD"))
      }

      snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
        authentication(userName: System.getenv("OSSRH_USERNAME"), password: System.getenv("OSSRH_PASSWORD"))
      }

      pom.project {
        groupId project.ext.pom.publishedGroupId
        artifactId project.ext.pom.artifact

        name project.ext.pom.libraryName
        description project.ext.pom.libraryDescription
        url project.ext.pom.siteUrl

        developers {
          developer {
            name project.ext.pom.author
          }
        }

        licenses {
          license {
            name project.ext.pom.licenseName
            url project.ext.pom.licenseUrl
          }
        }

        scm {
          connection = project.ext.pom.gitUrl
          developerConnection = project.ext.pom.gitUrl
          url = project.ext.pom.siteUrl
        }
      }
    }
  }
}

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

if (JavaVersion.current().isJava8Compatible()) {
  allprojects {
    tasks.withType(Javadoc) {
      options.addStringOption('Xdoclint:none', '-quiet')
    }
  }
}

artifacts {
  archives sourcesJar
  archives javadocJar
}
